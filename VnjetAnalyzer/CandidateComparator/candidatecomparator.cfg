process Demo =  {
  
source = PoolSource 
{ 
     # replace 'myfile.root' with the source file you want to use
     untracked vstring fileNames = {"file:chowder_event2.root"} 
}

replace PoolSource.fileNames = {
'/store/CSA07/skim/2008/1/11/CSA07-CSA07AllEvents-Chowder-A2-PDAllEvents-ReReco-100pb/0000/000EC697-ACC2-DC11-80F9-003048562978.root'
}

#keep the logging output to a nice level
service = MessageLogger {}

#service = Tracer {}

include "SimGeneral/HepPDTESSource/data/pythiapdt.cfi"

# CSA07 weight producer
module weight = CSA07EventWeightProducer {
    InputTag src = source
    
    # verbosity
    untracked bool talkToMe = false
    
    # overall luminosity normalization  (in pb-1) 
    double overallLumi = 100.
 }

# select partons instead of AllStable as jet inputs 
  module genParticlesPartons = GenParticleCandidateSelector {
   string src = "genParticleCandidates"
   bool stableOnly = false
   bool partons    = true
   untracked bool verbose = false
   vstring excludeList = {}
   vstring includeList = {}
  }

# produce the jets
  module partonJet = IterativeConeJetProducer {
    untracked string alias = "IC5PartonGenJet"
    untracked int32 debugLevel = 0
    double seedThreshold = 1.0
    double inputEtMin = 0.
    double inputEMin = 0.
    InputTag src = genParticlesPartons
    untracked string jetType = "GenJet"
    untracked bool verbose = false
    double coneRadius = 0.5
  }

# jets to candidate
  module partonJetCollectionClone = GenJetShallowCloneProducer{
    InputTag src = partonJet
  }

# jet selection (ptmin)
  module partonJetSele = PtMinCandSelector{
    InputTag src = partonJetCollectionClone
    double ptMin        = 20.0
  }

# select stables as jet inputs
  module genParticlesAllStableNoNuMuBSM = GenParticleCandidateSelector {
   string src = "genParticleCandidates"
   bool stableOnly = true
   untracked bool verbose = false
   vstring excludeList = {"nu_e", "nu_mu", "nu_tau",
                          "nu_ebar", "nu_mubar", "nu_taubar",
                          "mu+", "mu-",
                          "~chi_10", 
                          "~nu_eR", "~nu_muR", "~nu_tauR", 
			  "Graviton", "~Gravitino", 
                          "nu_Re", "nu_Rmu", "nu_Rtau", 
                          "nu*_e0", "Graviton*"
                         }
   vstring includeList = {}
  }

# produce the jets
  module genJet = IterativeConeJetProducer {
    untracked string alias = "IC5PartonGenJet"
    untracked int32 debugLevel = 0
    double seedThreshold = 1.0
    double inputEtMin = 0.
    double inputEMin = 0.
    InputTag src = genParticlesAllStableNoNuMuBSM
    untracked string jetType = "GenJet"
    untracked bool verbose = false
    double coneRadius = 0.5
  }

# jets to candidate
  module genJetCollectionClone = GenJetShallowCloneProducer{
    InputTag src = genJet
  }

# jet selection (ptMin)
  module genJetSele = PtMinCandSelector{
    InputTag src = genJetCollectionClone
    double ptMin        = 20.0
  }

# matching
module matchMap = TrivialDeltaRMatcher  {
    InputTag src =  partonJetSele
    InputTag matched = genJetSele
    double distMin = 0.5
  }
 
module candcompare = CandidateComparator {
    InputTag src = partonJetSele
    InputTag matched  = genJetSele
    InputTag map = matchMap
    untracked string HistOutFile = "comparison.root" 
}

module jetcounter = JetCounter {
    InputTag src = genJetSele
    untracked string HistOutFile = "jetcounting.root"
}

sequence partonjets = {genParticlesPartons, partonJet, partonJetCollectionClone, partonJetSele}
sequence genjets    = {genParticlesAllStableNoNuMuBSM, genJet, genJetCollectionClone, genJetSele}
sequence analysis   = {matchMap, candcompare, jetcounter}
path p = {weight, (partonjets & genjets) , analysis} 

}
