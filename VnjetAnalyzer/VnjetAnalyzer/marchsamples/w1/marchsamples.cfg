process USER = { 

############
#   SETUP  #
############

untracked PSet maxEvents = {untracked int32 input = -1}

  source = PoolSource 
  { 
#   untracked vstring fileNames = {"file:/tmp/tomei/Z3jet_0ptw100-CMSSW167-RecNoPU_16.root"}
   untracked vstring fileNames = {
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_1.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_10.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_100.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_11.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_12.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_13.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_14.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_15.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_16.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_17.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_18.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_19.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_2.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_20.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_21.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_22.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_23.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_24.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_25.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_26.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_27.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_28.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_29.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_3.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_30.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_31.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_32.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_33.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_34.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_35.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_36.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_37.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_38.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_39.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_4.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_40.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_41.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_42.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_43.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_44.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_45.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_46.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_47.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_48.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_49.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_5.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_50.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_51.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_52.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_53.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_54.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_55.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_56.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_57.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_58.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_59.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_6.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_60.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_61.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_62.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_63.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_64.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_65.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_66.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_67.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_68.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_69.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_7.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_70.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_71.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_72.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_73.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_74.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_75.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_76.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_77.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_78.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_79.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_8.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_80.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_81.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_82.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_83.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_85.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_86.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_87.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_88.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_89.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_9.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_90.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_91.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_92.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_93.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_94.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_95.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_96.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_97.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_98.root',
'rfio:/castor/cern.ch/cms/generation/vecbos/PU/W1jet_0ptw100-CMSSW167-RecNoPU_99.root'
}
#   untracked uint32 skipEvents = 500
  }

#  untracked PSet options = {
#     untracked vstring SkipEvent = { "AlpgenProcessID" }
#  }

  module out = PoolOutputModule
  { 
    untracked string fileName = "test.root"
  }

  service = MessageLogger {
#      untracked vstring destinations =  {"debug"}
#      untracked PSet debug = { 
#         untracked string threshold = "DEBUG" 
#         untracked PSet DEBUG = { untracked int32 limit = -1}    
#      }
#      untracked vstring debugModules = {"preanalysis",
#					"QCDanalysis",
#					"EWKanalysis",
#					"QCDEWKanalysis",
#					"windowAnalysis"} 
   }

# service = Tracer { untracked string indention = "$$"}

include "SimGeneral/HepPDTESSource/data/pythiapdt.cfi"

# Module to count events.
  module counter = EventCounter{}

################
#   CALO JETS  #
################

# This cuts on jets WITHOUT them being converted to Candidates! :)
# This is my DEFINITION of jet: ICone, R = 0.5, Et > 30 GeV
# The bool filter = true makes sure that there is AT LEAST one
# jet that passes the cut, else the event is dropped.
  module caloJetSele = EtMinCaloJetSelector {    
    InputTag src = iterativeCone5CaloJets
    double etMin = 30.0
    bool filter = true
  }

# This is to get a CandidateCollection from a JetCollection
  module caloJetSeleClone = CaloJetShallowCloneProducer{
    InputTag src = caloJetSele
  }

# Get the three highest Et jets.
  module highestJets = LargestEtCandSelector {
    InputTag src = caloJetSeleClone 
    uint32 maxNumber = 3
  }

sequence caloJets = {caloJetSele, caloJetSeleClone, highestJets}

############
#   MUONS  # 
############

include "PhysicsTools/RecoCandAlgos/data/allMuonShallowClones.cfi"
# This gives me the "allMuons" muons.

# Get the three highest pt muons.
module highestMuons = LargestPtCandSelector {
    InputTag src = allMuons
    uint32 maxNumber = 2
  }

sequence recoMuons = {allMuons, highestMuons}

##########
#   MET  #
##########

# No special needs for MET.

###############
#   ANALYSIS  #
###############

# RAWDATA (preliminary) analysis.
module rawdata = VnjetAnalyzer {
    InputTag Jets = caloJetSeleClone
    InputTag highestJets = highestJets
    InputTag MET = met
    InputTag Muons = highestMuons
    InputTag Particles = genParticleCandidates
    untracked string HistOutFile = "rawdata.root"
  }

sequence rawdataTier = {rawdata}

# Get the highest Et jet.
module leadingJet = LargestEtCandSelector {
    InputTag src = caloJetSeleClone 
    uint32 maxNumber = 1
  }

# Assert that the leadingJet is in the barrel (-1.3,1.3)
module baseline  = EtaPtMinCandSelector {
    InputTag src = leadingJet
    double ptMin = 0
    double etaMin = -1.3
    double etaMax = 1.3
    bool filter = true
  }

# BASELINE analysis
module QCDanalysis = VnjetAnalyzer {
    InputTag Jets = caloJetSeleClone
    InputTag highestJets = highestJets
    InputTag MET = met
    InputTag Muons = highestMuons
    InputTag Particles = genParticleCandidates
    untracked string HistOutFile = "baseline.root"
  }

sequence baselineTier = {leadingJet, baseline, QCDanalysis}

# Get the highest pt muon.
module leadingMuon = LargestPtCandSelector {
    InputTag src = allMuons 
    uint32 maxNumber = 1
  }

# Mimics the muon trigger.
module acceptanceMuon  = EtaPtMinCandSelector {
    InputTag src = leadingMuon
    double ptMin = 7
    double etaMin = -2.1
    double etaMax = 2.1
    bool filter = true
  }

# SELECTION analysis.
module QCDEWKanalysis = VnjetAnalyzer {
    InputTag Jets = caloJetSeleClone
    InputTag highestJets = highestJets
    InputTag MET = met
    InputTag Muons = highestMuons
    InputTag Particles = genParticleCandidates
    untracked string HistOutFile = "selection.root"
  }

sequence selectionTier = {leadingMuon, acceptanceMuon, QCDEWKanalysis}

module ZCandidates = MassRangeCandShallowCloneCombiner {
    string decay = "highestMuons@+ highestMuons@-"
    double massMin = 80
    double massMax = 110
  }

module Zselector = CandCountFilter {
    InputTag src = ZCandidates
    uint32 minNumber = 1
    bool filter = true
  }

module windowAnalysis = VnjetAnalyzer {
   InputTag Jets = caloJetSeleClone
   InputTag highestJets = highestJets
   InputTag MET = met
   InputTag Muons = highestMuons
   InputTag Particles = genParticleCandidates
   untracked string HistOutFile = "window.root"
}

sequence windowTier = {ZCandidates, Zselector, windowAnalysis}

sequence analysis = { rawdataTier, baselineTier, selectionTier, windowTier }


####################
#   OTHER GOODIES  #
####################

 module printDecay = ParticleDecayDrawer {
    InputTag src = genParticleCandidates
    untracked bool printP4 = false
    untracked bool printPtEtaPhi = false
    untracked bool printVertex = false
  }

 module printTree = ParticleListDrawer {
     untracked int32 maxEventsToPrint = 1
  }

##########################
#   SEQUENCES AND PATHS  #
##########################

path p = {counter, (caloJets & recoMuons), analysis}
# path printing = {printTree}

# endpath end = {out}
} 
