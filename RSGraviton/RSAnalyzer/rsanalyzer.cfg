process DEMO =  {

untracked PSet maxEvents = {untracked int32 input = -1}
  
source = PoolSource 
{ 
     untracked vstring fileNames = {
     'file:/data1/tomei/CMSSW_1_8_4/src/RSGraviton/RSAnalyzer/production/ParameterSpaceScanRECO/RS1000_ZZ_4j_AOD_10TeV_fastsim.root'
     } 
}

#keep the logging output to a nice level
service = MessageLogger {}

#good for debugging
#service = Tracer {}

# Basic plots
service = TFileService { 
    string fileName = "results.root"
  }

###########
# GENJETS #
###########

# Create the GenJets 
include "RecoJets/Configuration/data/GenJetParticles.cff"
include "RecoMET/Configuration/data/GenMETParticles.cff"
include "RecoMET/Configuration/data/RecoGenMET.cff"
include "RecoJets/JetProducers/data/sisCone7GenJetsNoNuBSM.cff"

############
# CALOJETS #
############

# Needed geometry for the CaloJets
  include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
  include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"

# Create the CaloJets
include "RecoJets/JetProducers/data/sisCone7CaloJets.cff"

################
# MC PARTICLES #
################

# Select MC-level particles: Gravitons and Zs
module trueGravitons = PdgIdAndStatusCandViewSelector {
    InputTag src = genParticleCandidates 
    vint32 pdgId = { 5000039 }
    vint32 status = {3}
  }
module trueZs = PdgIdAndStatusCandViewSelector {
    InputTag src = genParticleCandidates
    vint32 pdgId = { 23 }
    vint32 status = {3}
}

# Basic kinematic plots for the MC particles
module plotTrueZs = CandViewHistoAnalyzer {
    InputTag src = trueZs
    include "RSGraviton/RSAnalyzer/data/Zhistos.cff"
  }
module plotTrueGravitons = CandViewHistoAnalyzer {
    InputTag src = trueGravitons
    include "RSGraviton/RSAnalyzer/data/Ghistos.cff"
  }

###################
# ANALYSIS 2J->1G #
###################

# Get the first two jets
module twoGenJets = LargestEtGenJetSelector {
    InputTag src = sisCone7GenJetsNoNuBSM
    uint32 maxNumber = 2
  }

# Basic kinematic plots for the GenJets
module plotGenJets = CandViewHistoAnalyzer {
    InputTag src = twoGenJets
    include "RSGraviton/RSAnalyzer/data/jethistos.cff"
  }

module twoCaloJets = LargestEtCaloJetSelector {
    InputTag src = sisCone7CaloJets
    uint32 maxNumber = 2
  }

# Basic kinematic plots for the CaloJets
module plotCaloJets = CandViewHistoAnalyzer {
    InputTag src = twoCaloJets
    include "RSGraviton/RSAnalyzer/data/jethistos.cff"
  }

# Combine the two first jets in order to form gravitons
module directGravitons = CandViewCombiner {
    string decay = "twoCaloJets twoCaloJets"
    string cut = "0.0 < mass < 2000.0"
  }

# Basic kinematic plots for the direct gravitons
module plotDirectGravitons = CandViewHistoAnalyzer {
    InputTag src = directGravitons
    include "RSGraviton/RSAnalyzer/data/Ghistos.cff"
  }

########
# CUTS #
########

# Get the highest GenJet
module leadingGenJet = LargestEtGenJetSelector {
    InputTag src = sisCone7GenJetsNoNuBSM
    uint32 maxNumber = 1
  }

# Make a mass window cut
module massLeadingGenJet = CandViewSelector {
    InputTag src = leadingGenJet
    string cut = "mass > 80 & mass < 110"
    bool filter = true
  }

#################
# DEEP ANALYSIS #
#################

module twoCaloJetsClone = CaloJetShallowCloneProducer {
    InputTag src = twoCaloJets
}

module twoGenJetsClone = GenJetShallowCloneProducer {
    InputTag src = twoGenJets
}
 
module matchGenJetsCaloJets = TrivialDeltaRMatcher {
    InputTag src = twoGenJetsClone
    InputTag matched = twoCaloJetsClone
    double distMin = 0.5
} 

# Create candidates from tracks. My idea is to count tracks inside jets.
include "PhysicsTools/RecoAlgos/data/allTracks.cfi"
replace allTracks.src = ctfGSWithMaterialTracks

module jetanalyzer = RSJetAnalyzer {}

module printTree = ParticleListDrawer {
    InputTag src = genParticleCandidates
    untracked int32 maxEventsToPrint = 1
  }

#############
# SEQUENCES #
#############

sequence makeMC = {genJetParticles, trueGravitons, trueZs, plotTrueGravitons, plotTrueZs}
sequence makeGenJets = {sisCone7GenJetsNoNuBSM, twoGenJets}
sequence makeCuts = {leadingGenJet, massLeadingGenJet}
sequence makeGenJets2 = {plotGenJets & twoGenJetsClone}
sequence makeCaloJets = {sisCone7CaloJets, twoCaloJets, (plotCaloJets & twoCaloJetsClone) }
sequence makeDirectGravitons = {directGravitons, plotDirectGravitons} 
sequence makeDeepAnalysis = {matchGenJetsCaloJets, allTracks, jetanalyzer}

path p1 = {makeMC, makeGenJets, makeCuts, makeGenJets2, makeCaloJets, 
	   makeDirectGravitons, matchGenJetsCaloJets, allTracks, jetanalyzer}

#path printing = {printTree}

}
